{"remainingRequest":"/Users/benjaminvaniseghem/Documents/web4/web4-20172018-2c3-gent-BenjaminVanIseghem/frontend/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/Users/benjaminvaniseghem/Documents/web4/web4-20172018-2c3-gent-BenjaminVanIseghem/frontend/node_modules/rxjs/_esm5/util/isNumeric.js","dependencies":[{"path":"/Users/benjaminvaniseghem/Documents/web4/web4-20172018-2c3-gent-BenjaminVanIseghem/frontend/node_modules/rxjs/_esm5/util/isNumeric.js","mtime":499162500000},{"path":"/Users/benjaminvaniseghem/Documents/web4/web4-20172018-2c3-gent-BenjaminVanIseghem/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1523354012696},{"path":"/Users/benjaminvaniseghem/Documents/web4/web4-20172018-2c3-gent-BenjaminVanIseghem/frontend/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["/** PURE_IMPORTS_START .._util_isArray PURE_IMPORTS_END */\nimport { isArray } from '../util/isArray';\nexport function isNumeric(val) {\n    // parseFloat NaNs numeric-cast false positives (null|true|false|\"\")\n    // ...but misinterprets leading-number strings, particularly hex literals (\"0x...\")\n    // subtraction forces infinities to NaN\n    // adding 1 corrects loss of precision from parseFloat (#15100)\n    return !isArray(val) && (val - parseFloat(val) + 1) >= 0;\n}\n;\n//# sourceMappingURL=isNumeric.js.map\n",null]}